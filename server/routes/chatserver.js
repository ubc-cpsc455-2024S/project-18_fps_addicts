// chatserver-generated
// Basic inspriation: https://socket.io/how-to/use-with-react
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const os = require('os');
const cors = require('cors');
const router = express();
const Filter = require('bad-words');
 // "start": "node ./bin/www" - old package start


//using cors to communicate between frontend and backend
const corsOptions = {
    origin: "https://ubcstudyspotterclient.onrender.com", // frontend URI (ReactJS)

    methods: ['GET', 'POST'],
    credentials: true,
    optionsSuccessStatus: 200
}

router.use(cors(corsOptions));

const server = http.createServer(router);

// This segment was generated by ChatGTP on July 8th, 2024'
// The prompt used was: how to make react app reachable to all other devices on network
// This is just an generic getip address fucntion
//everything tagged with "port generated" was in part created thanks to this prompt
//Create a new server and set its origin to the client
const io = new Server(server, {
    cors: {
        origin: 'https://ubcstudyspotterclient.onrender.com', // Allow all origins (You can specify the origin you want to allow)
        methods: ['GET', 'POST'],
    },
});

// "port generated"
// Start the handshake to get the route to the client. Deprecated once the project was deployed but useful if this project wants to be run on a localhost. 
function getLocalIpAddress() {
    const interfaces = os.networkInterfaces();
    for (let iface in interfaces) {
        for (let alias of interfaces[iface]) {
            if (alias.family === 'IPv4' && !alias.internal) {
                return alias.address;
            }
        }
    }
    return '0.0.0.0';
}

let messages = {};
const welcomeMessage = { text: 'Welcome to the chat!', timestamp: new Date().toISOString(), editable: false };
const localIpAddress = getLocalIpAddress();
const filter = new Filter();


io.on('connection', (socket) => {
    console.log('New client connected');
    console.log(localIpAddress);

    // "port generated"
    //broadcast the server ip so clients can connect to it
    socket.emit('serverIp', localIpAddress);

    
    //when a client joins the server, send a welcome message. Join based on the pinID
    socket.on('join', ({ pinId, userId }) => {
        socket.join(pinId);
        socket.userId = userId;

        if (!messages[pinId]) {
            messages[pinId] = [welcomeMessage];
        }

        socket.emit('init', messages[pinId]);
    });

    //when a message is sent, make sure it is cleaed by the fliter for bad language.
    //Messages will only be broadcast to the pin it was sent from, and not others
    socket.on('message', (message) => {
        const { pinId } = message;

        message.text = filter.clean(message.text);

        if (!messages[pinId]) {
            messages[pinId] = [];
        }

        messages[pinId].push(message);
        io.to(pinId).emit('message', message);
    });

    // This segment was generated by ChatGTP on June 28nd, 2024'
    // The prompt used was: how to make a edit a message in a chatbox.
    // modifcations were made to intergrate it to the porject. One such major modification made was to make it so each pin is treated differently
    //If a message belongs to the client who sent it, filter the edited message and broadcast the change
    socket.on('edit-message', (editedMessage) => {
        const { pinId, id, userId } = editedMessage;

       

        if (messages[pinId]) {
            const message = messages[pinId].find((msg) => msg.id === id);
            if (message && message.userId === userId) {
                editedMessage.text = filter.clean(editedMessage.text);
                Object.assign(message, editedMessage);
                io.to(pinId).emit('edit-message', editedMessage);
            }
        }
    });
    
    //If a message belongs to the client, remove the message from the list of messages in that particular pin and broadcast the change
    socket.on('delete-message', ({ pinId, messageId, userId }) => {
        if (messages[pinId]) {
            const messageIndex = messages[pinId].findIndex((msg) => msg.id === messageId);
            if (messageIndex !== -1 && messages[pinId][messageIndex].userId === userId) {
                messages[pinId].splice(messageIndex, 1);
                io.to(pinId).emit('delete-message', { pinId, messageId });
            }
        }
    });

    //sent when a pin chat is closed
    socket.on('leave', (pinId) => {
        socket.leave(pinId);
    });

    //sent when a client disconnects
    socket.on('disconnect', () => {
        console.log('Client disconnected');
    });
});

//allow any client on network to connect to server
server.listen(4000, '0.0.0.0', () => {
    console.log('Server is running on port 4000');
});


module.exports = router;