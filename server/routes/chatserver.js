// chatserver-generated
// Basic inspriation: https://socket.io/how-to/use-with-react
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const os = require('os');
const cors = require('cors');
const router = express();


router.use(cors());

const server = http.createServer(router);
const io = new Server(server, {
    cors: {
        origin: '*', // Allow all origins (You can specify the origin you want to allow)
        methods: ['GET', 'POST'],
    },
});

// This segment was generated by ChatGTP on July 8th, 2024'
// The prompt used was: how to make react app reachable to all other devices on network
// This is just an generic getip address fucntion
function getLocalIpAddress() {
    const interfaces = os.networkInterfaces();
    for (let iface in interfaces) {
        for (let alias of interfaces[iface]) {
            if (alias.family === 'IPv4' && !alias.internal) {
                return alias.address;
            }
        }
    }
    return '0.0.0.0';
}

let messages = {};
const welcomeMessage = { text: 'Welcome to the chat!', timestamp: new Date().toISOString(), editable: false };
const localIpAddress = getLocalIpAddress();

io.on('connection', (socket) => {
    console.log('New client connected');
    console.log(localIpAddress);
    socket.emit('serverIp', localIpAddress);

    socket.on('join', (pinId) => {
        socket.join(pinId);

        if (!messages[pinId]) {
            messages[pinId] = [welcomeMessage];
        }

        socket.emit('init', messages[pinId]);
    });

    socket.on('message', (message) => {
        const { pinId } = message;

        if (!messages[pinId]) {
            messages[pinId] = [];
        }

        messages[pinId].push(message);
        io.to(pinId).emit('message', message);
    });

    // This segment was generated by ChatGTP on June 28nd, 2024'
    // The prompt used was: how to make a edit a message in a chatbox.
    // modifcations were made to intergrate it to the porject. One such major modification made was to make it so each pin is treated differently
    socket.on('edit-message', (editedMessage) => {
        const { pinId, id } = editedMessage;

        if (messages[pinId]) {
            messages[pinId] = messages[pinId].map((msg) =>
                msg.id === id ? editedMessage : msg
            );
            io.to(pinId).emit('edit-message', editedMessage);
        }
    });

    socket.on('delete-message', ({ pinId, messageId }) => {
        if (messages[pinId]) {
            messages[pinId] = messages[pinId].filter((msg) => msg.id !== messageId);
            io.to(pinId).emit('delete-message', { pinId, messageId });
        }
    });

    socket.on('leave', (pinId) => {
        socket.leave(pinId);
    });

    socket.on('disconnect', () => {
        console.log('Client disconnected');
    });
});

server.listen(4000, '0.0.0.0', () => {
    console.log('Server is running on port 4000');
});


module.exports = router;